/*
 * 云小朵开发者服务平台
 * 云小朵开发者服务平台应用程序接口文档
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: minclouds@163.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.minclouds.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CodeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-28T14:53:45.749+08:00[Asia/Shanghai]")
public class CodeRequest {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  /**
   * Gets or Sets payType
   */
  @JsonAdapter(PayTypeEnum.Adapter.class)
  public enum PayTypeEnum {
    ALL("all"),
    
    APP("app"),
    
    LINK("link"),
    
    UDID("udid");

    private String value;

    PayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayTypeEnum fromValue(String value) {
      for (PayTypeEnum b : PayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAY_TYPE = "payType";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private PayTypeEnum payType;

  public static final String SERIALIZED_NAME_SUB_UUID = "subUuid";
  @SerializedName(SERIALIZED_NAME_SUB_UUID)
  private String subUuid;

  public static final String SERIALIZED_NAME_SYSTEM_UUID = "systemUuid";
  @SerializedName(SERIALIZED_NAME_SYSTEM_UUID)
  private String systemUuid;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AUTH("Auth"),
    
    LINK("Link"),
    
    UDID("Udid");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_UUID = "userUuid";
  @SerializedName(SERIALIZED_NAME_USER_UUID)
  private String userUuid;


  public CodeRequest count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public CodeRequest paid(Boolean paid) {
    
    this.paid = paid;
    return this;
  }

   /**
   * Get paid
   * @return paid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPaid() {
    return paid;
  }


  public void setPaid(Boolean paid) {
    this.paid = paid;
  }


  public CodeRequest payType(PayTypeEnum payType) {
    
    this.payType = payType;
    return this;
  }

   /**
   * Get payType
   * @return payType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayTypeEnum getPayType() {
    return payType;
  }


  public void setPayType(PayTypeEnum payType) {
    this.payType = payType;
  }


  public CodeRequest subUuid(String subUuid) {
    
    this.subUuid = subUuid;
    return this;
  }

   /**
   * Get subUuid
   * @return subUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubUuid() {
    return subUuid;
  }


  public void setSubUuid(String subUuid) {
    this.subUuid = subUuid;
  }


  public CodeRequest systemUuid(String systemUuid) {
    
    this.systemUuid = systemUuid;
    return this;
  }

   /**
   * Get systemUuid
   * @return systemUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSystemUuid() {
    return systemUuid;
  }


  public void setSystemUuid(String systemUuid) {
    this.systemUuid = systemUuid;
  }


  public CodeRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CodeRequest userUuid(String userUuid) {
    
    this.userUuid = userUuid;
    return this;
  }

   /**
   * Get userUuid
   * @return userUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserUuid() {
    return userUuid;
  }


  public void setUserUuid(String userUuid) {
    this.userUuid = userUuid;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeRequest codeRequest = (CodeRequest) o;
    return Objects.equals(this.count, codeRequest.count) &&
        Objects.equals(this.paid, codeRequest.paid) &&
        Objects.equals(this.payType, codeRequest.payType) &&
        Objects.equals(this.subUuid, codeRequest.subUuid) &&
        Objects.equals(this.systemUuid, codeRequest.systemUuid) &&
        Objects.equals(this.type, codeRequest.type) &&
        Objects.equals(this.userUuid, codeRequest.userUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, paid, payType, subUuid, systemUuid, type, userUuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeRequest {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    subUuid: ").append(toIndentedString(subUuid)).append("\n");
    sb.append("    systemUuid: ").append(toIndentedString(systemUuid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userUuid: ").append(toIndentedString(userUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

