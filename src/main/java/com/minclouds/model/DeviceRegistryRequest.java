/*
 * 云小朵开发者服务平台
 * 云小朵开发者服务平台应用程序接口文档
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: minclouds@163.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.minclouds.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * DeviceRegistryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-27T12:14:17.520431+08:00[Asia/Shanghai]")
public class DeviceRegistryRequest {
  public static final String SERIALIZED_NAME_ACCESS_KEY = "accessKey";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private String accessKey;

  /**
   * 证书请求级别，默认为私有(Private), 目前仅支持：Private，Protected，Public
   */
  @JsonAdapter(AccessLevelEnum.Adapter.class)
  public enum AccessLevelEnum {
    DISABLED("Disabled"),
    
    INHERITED("Inherited"),
    
    INTERNAL("Internal"),
    
    PRIVATE("Private"),
    
    PROTECTED("Protected"),
    
    PUBLIC("Public");

    private String value;

    AccessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessLevelEnum fromValue(String value) {
      for (AccessLevelEnum b : AccessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_LEVEL = "accessLevel";
  @SerializedName(SERIALIZED_NAME_ACCESS_LEVEL)
  private AccessLevelEnum accessLevel;

  public static final String SERIALIZED_NAME_ACCOUNT_UUID = "accountUuid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_UUID)
  private String accountUuid;

  public static final String SERIALIZED_NAME_APP_UUID = "appUuid";
  @SerializedName(SERIALIZED_NAME_APP_UUID)
  private String appUuid;

  public static final String SERIALIZED_NAME_AUTO_SELECT = "autoSelect";
  @SerializedName(SERIALIZED_NAME_AUTO_SELECT)
  private Boolean autoSelect;

  public static final String SERIALIZED_NAME_CALLBACK = "callback";
  @SerializedName(SERIALIZED_NAME_CALLBACK)
  private String callback;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_EXTRA = "extra";
  @SerializedName(SERIALIZED_NAME_EXTRA)
  private String extra;

  public static final String SERIALIZED_NAME_IMEI = "imei";
  @SerializedName(SERIALIZED_NAME_IMEI)
  private String imei;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public static final String SERIALIZED_NAME_PRICE_LIMIT = "priceLimit";
  @SerializedName(SERIALIZED_NAME_PRICE_LIMIT)
  private BigDecimal priceLimit;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  /**
   * 允许用户选择使用的签名类型
   */
  @JsonAdapter(SignTypeEnum.Adapter.class)
  public enum SignTypeEnum {
    APPSTORE("AppStore"),
    
    MDMENTERPRISE("MdmEnterprise"),
    
    MONTHENTERPRISE("MonthEnterprise"),
    
    ORIGINALMODE("OriginalMode"),
    
    SUPERENTERPRISE("SuperEnterprise"),
    
    SUPERPERSONAL("SuperPersonal"),
    
    TESTFLIGHT("TestFlight");

    private String value;

    SignTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignTypeEnum fromValue(String value) {
      for (SignTypeEnum b : SignTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIGN_TYPE = "signType";
  @SerializedName(SERIALIZED_NAME_SIGN_TYPE)
  private SignTypeEnum signType;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SYSTEM_UUID = "systemUuid";
  @SerializedName(SERIALIZED_NAME_SYSTEM_UUID)
  private String systemUuid;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_UDID = "udid";
  @SerializedName(SERIALIZED_NAME_UDID)
  private String udid;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;


  public DeviceRegistryRequest accessKey(String accessKey) {
    
    this.accessKey = accessKey;
    return this;
  }

   /**
   * 调用接口凭证标识:在系统AccessKey管理中创建
   * @return accessKey
  **/
  @ApiModelProperty(required = true, value = "调用接口凭证标识:在系统AccessKey管理中创建")

  public String getAccessKey() {
    return accessKey;
  }


  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }


  public DeviceRegistryRequest accessLevel(AccessLevelEnum accessLevel) {
    
    this.accessLevel = accessLevel;
    return this;
  }

   /**
   * 证书请求级别，默认为私有(Private), 目前仅支持：Private，Protected，Public
   * @return accessLevel
  **/
  @ApiModelProperty(required = true, value = "证书请求级别，默认为私有(Private), 目前仅支持：Private，Protected，Public")

  public AccessLevelEnum getAccessLevel() {
    return accessLevel;
  }


  public void setAccessLevel(AccessLevelEnum accessLevel) {
    this.accessLevel = accessLevel;
  }


  public DeviceRegistryRequest accountUuid(String accountUuid) {
    
    this.accountUuid = accountUuid;
    return this;
  }

   /**
   * 账号的UUID,系统将优先使用指定的账户进行设备注册和签名，如果该账号无效或已无可用的注册设备数，则使用其他账号。在系统后台可以获取到账号的UUID, 签名回调中也包含该UUID
   * @return accountUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "账号的UUID,系统将优先使用指定的账户进行设备注册和签名，如果该账号无效或已无可用的注册设备数，则使用其他账号。在系统后台可以获取到账号的UUID, 签名回调中也包含该UUID")

  public String getAccountUuid() {
    return accountUuid;
  }


  public void setAccountUuid(String accountUuid) {
    this.accountUuid = accountUuid;
  }


  public DeviceRegistryRequest appUuid(String appUuid) {
    
    this.appUuid = appUuid;
    return this;
  }

   /**
   * 系统默认将为UDID关联到某一个APP UUID上，用已确认某个UDID在某个APP中是否已注册，通过API接口调用时，如果没有APPUUID，可以使用(System Uuid)代替，或随机生成一个
   * @return appUuid
  **/
  @ApiModelProperty(required = true, value = "系统默认将为UDID关联到某一个APP UUID上，用已确认某个UDID在某个APP中是否已注册，通过API接口调用时，如果没有APPUUID，可以使用(System Uuid)代替，或随机生成一个")

  public String getAppUuid() {
    return appUuid;
  }


  public void setAppUuid(String appUuid) {
    this.appUuid = appUuid;
  }


  public DeviceRegistryRequest autoSelect(Boolean autoSelect) {
    
    this.autoSelect = autoSelect;
    return this;
  }

   /**
   * 开启智能选择后，系统将根据当前证书价格的情况自动选择个人证书还是企业证书，包月到期将自动切换到按次付费
   * @return autoSelect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "开启智能选择后，系统将根据当前证书价格的情况自动选择个人证书还是企业证书，包月到期将自动切换到按次付费")

  public Boolean getAutoSelect() {
    return autoSelect;
  }


  public void setAutoSelect(Boolean autoSelect) {
    this.autoSelect = autoSelect;
  }


  public DeviceRegistryRequest callback(String callback) {
    
    this.callback = callback;
    return this;
  }

   /**
   * 设备注册成功后，系统将申请的证书通过回调地址发送到业务系统上
   * @return callback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "设备注册成功后，系统将申请的证书通过回调地址发送到业务系统上")

  public String getCallback() {
    return callback;
  }


  public void setCallback(String callback) {
    this.callback = callback;
  }


  public DeviceRegistryRequest deviceName(String deviceName) {
    
    this.deviceName = deviceName;
    return this;
  }

   /**
   * 设置名称，如果为空，则使用UDID，作为设备名
   * @return deviceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "设置名称，如果为空，则使用UDID，作为设备名")

  public String getDeviceName() {
    return deviceName;
  }


  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public DeviceRegistryRequest extra(String extra) {
    
    this.extra = extra;
    return this;
  }

   /**
   * 额外传递的数据，该数据，在回调时原路返回
   * @return extra
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "额外传递的数据，该数据，在回调时原路返回")

  public String getExtra() {
    return extra;
  }


  public void setExtra(String extra) {
    this.extra = extra;
  }


  public DeviceRegistryRequest imei(String imei) {
    
    this.imei = imei;
    return this;
  }

   /**
   * 手机的IMEI
   * @return imei
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "手机的IMEI")

  public String getImei() {
    return imei;
  }


  public void setImei(String imei) {
    this.imei = imei;
  }


  public DeviceRegistryRequest interval(Integer interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * 指定证书上传后的时间
   * @return interval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "指定证书上传后的时间")

  public Integer getInterval() {
    return interval;
  }


  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  public DeviceRegistryRequest priceLimit(BigDecimal priceLimit) {
    
    this.priceLimit = priceLimit;
    return this;
  }

   /**
   * 系统中大于该值的证书将不会被调用
   * @return priceLimit
  **/
  @ApiModelProperty(required = true, value = "系统中大于该值的证书将不会被调用")

  public BigDecimal getPriceLimit() {
    return priceLimit;
  }


  public void setPriceLimit(BigDecimal priceLimit) {
    this.priceLimit = priceLimit;
  }


  public DeviceRegistryRequest product(String product) {
    
    this.product = product;
    return this;
  }

   /**
   * 手机产品类型
   * @return product
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "手机产品类型")

  public String getProduct() {
    return product;
  }


  public void setProduct(String product) {
    this.product = product;
  }


  public DeviceRegistryRequest serial(String serial) {
    
    this.serial = serial;
    return this;
  }

   /**
   * 手机的序列号
   * @return serial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "手机的序列号")

  public String getSerial() {
    return serial;
  }


  public void setSerial(String serial) {
    this.serial = serial;
  }


  public DeviceRegistryRequest signType(SignTypeEnum signType) {
    
    this.signType = signType;
    return this;
  }

   /**
   * 允许用户选择使用的签名类型
   * @return signType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "允许用户选择使用的签名类型")

  public SignTypeEnum getSignType() {
    return signType;
  }


  public void setSignType(SignTypeEnum signType) {
    this.signType = signType;
  }


  public DeviceRegistryRequest signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * 签名校验，后台会对没错的设备注册进行数据校验，校验不通过，将不能签名；签名值：accessKey + udid + systemUuid + appUuid + accessLevel + priceLimit + timestamp + accessSecret; 签名算法：md5
   * @return signature
  **/
  @ApiModelProperty(required = true, value = "签名校验，后台会对没错的设备注册进行数据校验，校验不通过，将不能签名；签名值：accessKey + udid + systemUuid + appUuid + accessLevel + priceLimit + timestamp + accessSecret; 签名算法：md5")

  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }


  public DeviceRegistryRequest systemUuid(String systemUuid) {
    
    this.systemUuid = systemUuid;
    return this;
  }

   /**
   * 在云小朵官方网站后台开发内测菜单中，进入内测系统:创建一个&lt;手动配置实例&gt;类型，即可获得一个(System Uuid)
   * @return systemUuid
  **/
  @ApiModelProperty(required = true, value = "在云小朵官方网站后台开发内测菜单中，进入内测系统:创建一个<手动配置实例>类型，即可获得一个(System Uuid)")

  public String getSystemUuid() {
    return systemUuid;
  }


  public void setSystemUuid(String systemUuid) {
    this.systemUuid = systemUuid;
  }


  public DeviceRegistryRequest timestamp(Long timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * 当前时间的时间戳，用于校验请求的合法性，如果时间偏离当前时间，将可能导致失败
   * @return timestamp
  **/
  @ApiModelProperty(required = true, value = "当前时间的时间戳，用于校验请求的合法性，如果时间偏离当前时间，将可能导致失败")

  public Long getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public DeviceRegistryRequest udid(String udid) {
    
    this.udid = udid;
    return this;
  }

   /**
   * iOS或iPad设备UDID
   * @return udid
  **/
  @ApiModelProperty(required = true, value = "iOS或iPad设备UDID")

  public String getUdid() {
    return udid;
  }


  public void setUdid(String udid) {
    this.udid = udid;
  }


  public DeviceRegistryRequest version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * 手机版本号
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "手机版本号")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceRegistryRequest deviceRegistryRequest = (DeviceRegistryRequest) o;
    return Objects.equals(this.accessKey, deviceRegistryRequest.accessKey) &&
        Objects.equals(this.accessLevel, deviceRegistryRequest.accessLevel) &&
        Objects.equals(this.accountUuid, deviceRegistryRequest.accountUuid) &&
        Objects.equals(this.appUuid, deviceRegistryRequest.appUuid) &&
        Objects.equals(this.autoSelect, deviceRegistryRequest.autoSelect) &&
        Objects.equals(this.callback, deviceRegistryRequest.callback) &&
        Objects.equals(this.deviceName, deviceRegistryRequest.deviceName) &&
        Objects.equals(this.extra, deviceRegistryRequest.extra) &&
        Objects.equals(this.imei, deviceRegistryRequest.imei) &&
        Objects.equals(this.interval, deviceRegistryRequest.interval) &&
        Objects.equals(this.priceLimit, deviceRegistryRequest.priceLimit) &&
        Objects.equals(this.product, deviceRegistryRequest.product) &&
        Objects.equals(this.serial, deviceRegistryRequest.serial) &&
        Objects.equals(this.signType, deviceRegistryRequest.signType) &&
        Objects.equals(this.signature, deviceRegistryRequest.signature) &&
        Objects.equals(this.systemUuid, deviceRegistryRequest.systemUuid) &&
        Objects.equals(this.timestamp, deviceRegistryRequest.timestamp) &&
        Objects.equals(this.udid, deviceRegistryRequest.udid) &&
        Objects.equals(this.version, deviceRegistryRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKey, accessLevel, accountUuid, appUuid, autoSelect, callback, deviceName, extra, imei, interval, priceLimit, product, serial, signType, signature, systemUuid, timestamp, udid, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceRegistryRequest {\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    accessLevel: ").append(toIndentedString(accessLevel)).append("\n");
    sb.append("    accountUuid: ").append(toIndentedString(accountUuid)).append("\n");
    sb.append("    appUuid: ").append(toIndentedString(appUuid)).append("\n");
    sb.append("    autoSelect: ").append(toIndentedString(autoSelect)).append("\n");
    sb.append("    callback: ").append(toIndentedString(callback)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    imei: ").append(toIndentedString(imei)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    priceLimit: ").append(toIndentedString(priceLimit)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    signType: ").append(toIndentedString(signType)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    systemUuid: ").append(toIndentedString(systemUuid)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    udid: ").append(toIndentedString(udid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

