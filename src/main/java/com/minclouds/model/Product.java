/*
 * 云小朵开发者服务平台
 * 云小朵开发者服务平台应用程序接口文档
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: minclouds@163.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.minclouds.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-27T12:14:17.520431+08:00[Asia/Shanghai]")
public class Product {
  public static final String SERIALIZED_NAME_APPEND = "append";
  @SerializedName(SERIALIZED_NAME_APPEND)
  private BigDecimal append;

  /**
   * Gets or Sets commissionType
   */
  @JsonAdapter(CommissionTypeEnum.Adapter.class)
  public enum CommissionTypeEnum {
    FIXEDVALUE("FixedValue"),
    
    PERCENTAGE("Percentage");

    private String value;

    CommissionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommissionTypeEnum fromValue(String value) {
      for (CommissionTypeEnum b : CommissionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommissionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommissionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommissionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommissionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMMISSION_TYPE = "commissionType";
  @SerializedName(SERIALIZED_NAME_COMMISSION_TYPE)
  private CommissionTypeEnum commissionType;

  public static final String SERIALIZED_NAME_COMMISSION_VALUE = "commissionValue";
  @SerializedName(SERIALIZED_NAME_COMMISSION_VALUE)
  private BigDecimal commissionValue;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private BigDecimal discount;

  public static final String SERIALIZED_NAME_DYNAMIC = "dynamic";
  @SerializedName(SERIALIZED_NAME_DYNAMIC)
  private Boolean dynamic;

  public static final String SERIALIZED_NAME_FLOATING = "floating";
  @SerializedName(SERIALIZED_NAME_FLOATING)
  private Double floating;

  public static final String SERIALIZED_NAME_GUIDE = "guide";
  @SerializedName(SERIALIZED_NAME_GUIDE)
  private BigDecimal guide;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets ownerType
   */
  @JsonAdapter(OwnerTypeEnum.Adapter.class)
  public enum OwnerTypeEnum {
    PLATFORM("Platform"),
    
    THIRDPARTY("ThirdParty");

    private String value;

    OwnerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerTypeEnum fromValue(String value) {
      for (OwnerTypeEnum b : OwnerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OWNER_TYPE = "ownerType";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
  private OwnerTypeEnum ownerType;

  /**
   * Gets or Sets payType
   */
  @JsonAdapter(PayTypeEnum.Adapter.class)
  public enum PayTypeEnum {
    POSTPAY("Postpay"),
    
    PREPAY("Prepay");

    private String value;

    PayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayTypeEnum fromValue(String value) {
      for (PayTypeEnum b : PayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAY_TYPE = "payType";
  @SerializedName(SERIALIZED_NAME_PAY_TYPE)
  private PayTypeEnum payType;

  public static final String SERIALIZED_NAME_PLUS = "plus";
  @SerializedName(SERIALIZED_NAME_PLUS)
  private BigDecimal plus;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  /**
   * Gets or Sets productStatus
   */
  @JsonAdapter(ProductStatusEnum.Adapter.class)
  public enum ProductStatusEnum {
    AUDIT("Audit"),
    
    FORBIDDEN("Forbidden"),
    
    OFFLINE("Offline"),
    
    ONLINE("Online");

    private String value;

    ProductStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductStatusEnum fromValue(String value) {
      for (ProductStatusEnum b : ProductStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_STATUS = "productStatus";
  @SerializedName(SERIALIZED_NAME_PRODUCT_STATUS)
  private ProductStatusEnum productStatus;

  public static final String SERIALIZED_NAME_REAL_PRICE = "realPrice";
  @SerializedName(SERIALIZED_NAME_REAL_PRICE)
  private BigDecimal realPrice;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;


  public Product append(BigDecimal append) {
    
    this.append = append;
    return this;
  }

   /**
   * Get append
   * @return append
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getAppend() {
    return append;
  }


  public void setAppend(BigDecimal append) {
    this.append = append;
  }


  public Product commissionType(CommissionTypeEnum commissionType) {
    
    this.commissionType = commissionType;
    return this;
  }

   /**
   * Get commissionType
   * @return commissionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommissionTypeEnum getCommissionType() {
    return commissionType;
  }


  public void setCommissionType(CommissionTypeEnum commissionType) {
    this.commissionType = commissionType;
  }


  public Product commissionValue(BigDecimal commissionValue) {
    
    this.commissionValue = commissionValue;
    return this;
  }

   /**
   * Get commissionValue
   * @return commissionValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCommissionValue() {
    return commissionValue;
  }


  public void setCommissionValue(BigDecimal commissionValue) {
    this.commissionValue = commissionValue;
  }


  public Product detail(String detail) {
    
    this.detail = detail;
    return this;
  }

   /**
   * Get detail
   * @return detail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDetail() {
    return detail;
  }


  public void setDetail(String detail) {
    this.detail = detail;
  }


  public Product discount(BigDecimal discount) {
    
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getDiscount() {
    return discount;
  }


  public void setDiscount(BigDecimal discount) {
    this.discount = discount;
  }


  public Product dynamic(Boolean dynamic) {
    
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Get dynamic
   * @return dynamic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDynamic() {
    return dynamic;
  }


  public void setDynamic(Boolean dynamic) {
    this.dynamic = dynamic;
  }


  public Product floating(Double floating) {
    
    this.floating = floating;
    return this;
  }

   /**
   * Get floating
   * @return floating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getFloating() {
    return floating;
  }


  public void setFloating(Double floating) {
    this.floating = floating;
  }


  public Product guide(BigDecimal guide) {
    
    this.guide = guide;
    return this;
  }

   /**
   * Get guide
   * @return guide
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getGuide() {
    return guide;
  }


  public void setGuide(BigDecimal guide) {
    this.guide = guide;
  }


  public Product name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Product ownerType(OwnerTypeEnum ownerType) {
    
    this.ownerType = ownerType;
    return this;
  }

   /**
   * Get ownerType
   * @return ownerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OwnerTypeEnum getOwnerType() {
    return ownerType;
  }


  public void setOwnerType(OwnerTypeEnum ownerType) {
    this.ownerType = ownerType;
  }


  public Product payType(PayTypeEnum payType) {
    
    this.payType = payType;
    return this;
  }

   /**
   * Get payType
   * @return payType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayTypeEnum getPayType() {
    return payType;
  }


  public void setPayType(PayTypeEnum payType) {
    this.payType = payType;
  }


  public Product plus(BigDecimal plus) {
    
    this.plus = plus;
    return this;
  }

   /**
   * Get plus
   * @return plus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getPlus() {
    return plus;
  }


  public void setPlus(BigDecimal plus) {
    this.plus = plus;
  }


  public Product price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public Product productId(String productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Get productId
   * @return productId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Product productStatus(ProductStatusEnum productStatus) {
    
    this.productStatus = productStatus;
    return this;
  }

   /**
   * Get productStatus
   * @return productStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductStatusEnum getProductStatus() {
    return productStatus;
  }


  public void setProductStatus(ProductStatusEnum productStatus) {
    this.productStatus = productStatus;
  }


  public Product realPrice(BigDecimal realPrice) {
    
    this.realPrice = realPrice;
    return this;
  }

   /**
   * Get realPrice
   * @return realPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getRealPrice() {
    return realPrice;
  }


  public void setRealPrice(BigDecimal realPrice) {
    this.realPrice = realPrice;
  }


  public Product unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.append, product.append) &&
        Objects.equals(this.commissionType, product.commissionType) &&
        Objects.equals(this.commissionValue, product.commissionValue) &&
        Objects.equals(this.detail, product.detail) &&
        Objects.equals(this.discount, product.discount) &&
        Objects.equals(this.dynamic, product.dynamic) &&
        Objects.equals(this.floating, product.floating) &&
        Objects.equals(this.guide, product.guide) &&
        Objects.equals(this.name, product.name) &&
        Objects.equals(this.ownerType, product.ownerType) &&
        Objects.equals(this.payType, product.payType) &&
        Objects.equals(this.plus, product.plus) &&
        Objects.equals(this.price, product.price) &&
        Objects.equals(this.productId, product.productId) &&
        Objects.equals(this.productStatus, product.productStatus) &&
        Objects.equals(this.realPrice, product.realPrice) &&
        Objects.equals(this.unit, product.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(append, commissionType, commissionValue, detail, discount, dynamic, floating, guide, name, ownerType, payType, plus, price, productId, productStatus, realPrice, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    append: ").append(toIndentedString(append)).append("\n");
    sb.append("    commissionType: ").append(toIndentedString(commissionType)).append("\n");
    sb.append("    commissionValue: ").append(toIndentedString(commissionValue)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    floating: ").append(toIndentedString(floating)).append("\n");
    sb.append("    guide: ").append(toIndentedString(guide)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("    payType: ").append(toIndentedString(payType)).append("\n");
    sb.append("    plus: ").append(toIndentedString(plus)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productStatus: ").append(toIndentedString(productStatus)).append("\n");
    sb.append("    realPrice: ").append(toIndentedString(realPrice)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

