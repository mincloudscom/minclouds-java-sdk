/*
 * 云小朵开发者服务平台
 * 云小朵开发者服务平台应用程序接口文档
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: minclouds@163.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.minclouds.api;

import com.minclouds.ApiException;
import com.minclouds.model.AppUserData;
import java.math.BigDecimal;
import com.minclouds.model.ConnectKeyInfo;
import com.minclouds.model.DeviceRegistryRequest;
import com.minclouds.model.DeviceRegistryResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IosDeviceApi
 */
@Ignore
public class IosDeviceApiTest {

    private final IosDeviceApi api = new IosDeviceApi();

    
    /**
     * iPhone设备禁用
     *
     * iPhone设备禁用，手动禁用设备调用
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableDeviceTest() throws ApiException {
        String udid = null;
        Boolean response = api.disableDevice(udid);

        // TODO: test validations
    }
    
    /**
     * iPhone APP 禁用
     *
     * iPhone APP 禁用，手动禁用APP
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableDeviceAppTest() throws ApiException {
        AppUserData data = null;
        Boolean response = api.disableDeviceApp(data);

        // TODO: test validations
    }
    
    /**
     * iPhone设备解禁
     *
     * iPhone设备解禁，设备禁用后重新启用
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableDeviceTest() throws ApiException {
        String udid = null;
        Boolean response = api.enableDevice(udid);

        // TODO: test validations
    }
    
    /**
     * iPhone APP 解禁
     *
     * iPhone APP 解禁，APP禁用后重新启用
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableDeviceAppTest() throws ApiException {
        AppUserData data = null;
        Boolean response = api.enableDeviceApp(data);

        // TODO: test validations
    }
    
    /**
     * UDID设备解禁
     *
     * UDID设备解禁，如果UDID被禁用有需要重新启用，可以手动解除禁用
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableUdidTest() throws ApiException {
        String udid = null;
        Boolean response = api.enableUdid(udid);

        // TODO: test validations
    }
    
    /**
     * 获取设备注册的相关信息
     *
     * IOS设备注册后的描述文件，签名所需的P12证书，以及P12证书的密码, 如果该UDID未注册成功将返回null
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceRegistryTest() throws ApiException {
        String udid = null;
        DeviceRegistryResponse response = api.getDeviceRegistry(udid);

        // TODO: test validations
    }
    
    /**
     * 获取安装跳转文件的地址
     *
     * 安装跳转文件用来在网页上直接跳转到设备管理里面安装描述文件
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJumpMobileProvisionTest() throws ApiException {
        String response = api.getJumpMobileProvision();

        // TODO: test validations
    }
    
    /**
     * 获取当前共享证书的最低价格
     *
     * 用户在获取证书的时候，可以调用该接口获取当前注册个人UDID的共享证书的最低价格
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPublicPriceTest() throws ApiException {
        BigDecimal response = api.getPublicPrice();

        // TODO: test validations
    }
    
    /**
     * 获取签名工具的地址
     *
     * 签名工具是用来进行对IPA重新签名的工具程序
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSignToolTest() throws ApiException {
        String osType = null;
        String response = api.getSignTool(osType);

        // TODO: test validations
    }
    
    /**
     * 获取UDID的状态
     *
     * 获取系统保存的UDID的状态：如果系统保存了该UDID,在返回该UDID的状态，如果系统没有该UDID，返回：ENABLED状态
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUdidStatusTest() throws ApiException {
        String udid = null;
        String response = api.getUdidStatus(udid);

        // TODO: test validations
    }
    
    /**
     * UDID合格性校验
     *
     * UDID合格性校验，在调用签名前先校验UDID的合法性，防止注册设备损失
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isUdidEnabledTest() throws ApiException {
        String udid = null;
        Boolean response = api.isUdidEnabled(udid);

        // TODO: test validations
    }
    
    /**
     * 校验P8证书的接口
     *
     * 校验P8证书有效性的接口，当重签用户进入签名流程，如果之前签名的安装包数据还存在，通过该接口可以校验P8证书是否有效，如果有效，则直接使用之前的包分发，否则进入重签获取证书流程
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isValidKeyTest() throws ApiException {
        ConnectKeyInfo connectKeyInfo = null;
        Boolean response = api.isValidKey(connectKeyInfo);

        // TODO: test validations
    }
    
    /**
     * iOS设备注册请求
     *
     * iOS设备注册请求
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void register2Test() throws ApiException {
        DeviceRegistryRequest registryRequest = null;
        Map<String, Object> response = api.register2(registryRequest);

        // TODO: test validations
    }
    
}
